8-12-14 Got datepicker and second screen added. Adding back end to datepicker tomorrow
8-13-14 Got fields and listeners for second screen set up. Need to delete edittext on first screen. And need to implement a next button on your number pad or find an equally smooth way of navigating through them. 
8-14-14 Added back end to TM fields. Added other front end components on secondScreen. Created segue to third screen. Next on your plate is transferring the data between those views and updating the title. 
	I would also think about holes you fell into during android development (besides the fact that java is a spacesuit that takes 500 lines to do anything but will go anywhere). Primarily try to make use of abstractio         and don't let your class definitions get too bloated. Research ways to transfer that data then implement that on Sunday or Monday. 
8-19-14: Added data transfer for training maxes, still need to trransfer rest of data including cycle, unitmode and rounding boolean. After that, take care of error handling on your training maxes and cycle column (no ridculous values for training maxes, cycles between 1-5. Might as well create pattern adjuster segue and view controller now so you don't have to have a wild goose chase with methods like you did in android.
8-20-14: Added error handling and some slight UI changes to avoid sliding my view upwafds just so user can type a number between 1 and 5. Added error handling to all fields that need it. Much more general than android version, I like it slightly better and not just because it was easier to implement. It's cleaner. Data transfer should be good to go. Added condition on segue to only continue if there were no errors generated by any of the fields. (0, empty or a ridiculous number). Found a way to do drag and drop using already existing components. Finding out it's easier to just not reinvent the wheel.  Added sqlite back end. Need to modify save/query methods 
After that, probably pursue creating a basic projection with no views etc to worry about. Lots of methods to create. First up is getting a pattern creation page up. That needs to be done eventually so you may as well suck it up and add it.
database info: http://www.techotopia.com/index.php/An_Example_SQLite_based_iOS_7_Application
8-21-14: After a lot of initial struggle I was able to create the pattern creation page. There is just some segue data manipulation to be done and I think we should be good to go after that. Currently bugs that need to be squashed before moving forward are starting date preservation between pattern adjustment and datepicker. All your other views implement the default navigation system but you new buttons on the pattern page throw a wrench into things. To fix I would just play segue vollyball. It's not elegant but it's my first app :) After data transfer is hooked up I'd say you're good to go getting sql set up on TableDisplay.h/.m, after that dig up those functions you wrote in c and write any additional ones as they come up, using android source as a guide.
8-25-14: Fixed date bug via segue volleyball, dates should now be saved when going from adjustpattern (already support from TM)  Got all of data to transfer, added label which updates user of what pattern they are currently using. Got initial sql set up, next up is creating insert/select methods. (Hopefully somewhat similar to your android sqllite methods.. minus the lack of ContentValues:( ) 
8-26-14: Got inserts/retrievals going, not quite sure what's next. Don't dive right in. Have a plan. 
8-27-14: Worked on translating dateprocessor class. wrestled with objective c date formats. Fixed bug with datepicker. Next up is to fix date formatting in you processor method so you can call incrementDay and whatnot. After that fix your timezone and locale stuff in your datepicker screen because that's gonna cause all kinds of wrong dates and you're better than that ;P
8-28-14: More class translation, got KilogramPlateComputer translated... This is all gonna be hell to test until it all comes together... Then it'll still probably be hell to test. One step at a time (literally and debugging) I guess. Still need to fix open/close db stuff on methods or figure a cute way of doing it. Look into how resource intensive opening/closing a sqlite database and make a decision from there. If it's high, just have a method that gets called in constructor (init) and then override whatever method viewExist uses. I'm sure there's one. Timezone stuff is done. Will need to retrieve date somehow (needs a pretty format). It's different in objective c because we are not able to format a calendar object like we can in android 
9-1-14: Poundplatecomputer translation. Add your sql and start congiuring logic. 
9-2-14: Working on translating calculateCycle methodi(thought this was already done).. Sql needs to come in soon too.
9-3-14: Sick, got some work done on calculatecycle but I really can't focus. Adding in inserts tomorrow. 
9-4-14: Got initial back end up and running so that is of some celebration given my lazy streak. Increment Frequency is throwing some errors, other than that I think your data is being inserted correctly. Current priority is fixing frequency error (it is throwing your "error" case within your switch statement so take a look at that on sunday/monday), after that cleaning up your decimals before insertion is next (whether or not you do this in addevent or in the calculate method is up to you, doesn't really matter. Also don't forget to figure out a cleanup method for database. (perhaps when the database doesn't exist create it? put some thought into this and do something that makes sense)
9-5-14: Plugged in prewritten code without too many problems. Fixed frequency error, local variable was overriding my class variable. Plugged in data retrieval and seems to be working pretty well. Fixed date not incrementing bug, you were incrementing the current date over and over again, in other words, it did increment, however, it was incrementing the wrong date. As before, getting a delete method up and running would be good. It can just be called programatically, no need to set up a button yet. Beyond that create a method that gets called after population of a row to set up your ui row components, do some reading on that tomorrow morning.  
9-11-14: Been extremely busy preparing for interview but that's really no excus. To make up for it I had a productive day I guess. Created custom table Cell class, pretty generic right now but the fact that I know how to implement a custtom cell provides for a lot of pretty UI potential. There is a number of cycles bug that needs to be taken care of (It is not taking you default value of three from your segemented selection is my guess - reverting to a default value of one, if that isn't the problem check the segue. Table UI is a little ugly but the data is there. Fix up the UI. Figure out how to clear a tableDisplay, then for bench only/freq only days just check the frequency before it's outputted to the table. Easy as pie :) Also fix your declarations within your populateArrays method because you are wasting memory and all this studying you've been doing for your interviews should make you know better. Lots to do so hop on it dude, this goes out at the end of the month.
9-15-14: Fixed number of cycles bug was checked against my unitField switch instead of my segmented control. Implemented populateArray method to include whereClause for sort by. Deletion and sort still need to be implemented. Table view stuff is screwed up do some reading on clearing tableviewes. Reset button the bug you opened on github (segue volleyball had you mising something) needs to be closed 
9-16-14: View by is in and working :)  Mode string is null in your training max stream. Overrode  default back button code to clear database, however, we'll have to see how that plays with "view existing projection" feature. I don't know why I put that in quotes. Rounding is getting better. It seems to work so well I can't turn it off. Take a look at ViewDidLoad and ensure that the flag is actually changing when you go back and adjust lifts and change nothing but that flag. Null mode string is a bug that needs fixed. Rounding is fucked, take a look at line 334 on tableDisplay.m, all that logic may not even be needed if your round flags and methods are doing what they're supposed to. Don't forget about pattern segue bug (just do an array check on the pattern you are initializing the table with, it should either have the default value, or the changed value. I think it's already in the segue it's just a matter of checking if it's in the segue going both ways (i.e. going BACK into the patternAdjuster with a nondefault pattern, the pattern adjuster should be initialized to that pattern
9-17-14: After using integer and not NSINteger for switch value i fixed rounding flag bug. NSIntegers are stupid and shouldn't be a thing. Fixed training stram values, apparently didn't know how to use c's ternary operator :) Fixed segue pattern stuff, now old pattern will load. (Within current application session) 
 Stop writing such long log entries, they're tough to read in this weird text wrapping excuse  mac somehow calls vim. </endUnwarrantedRant> Clean up errors and brainstorm how to display barbells. It will likely be on one page if I even end up going through with the barbell display

9-18-14: Take a look at this. http://stackoverflow.com/questions/3349609/how-to-detect-touch-event-in-table-cells-for-iphone
9-25-14: Releasing by end of month probably isn't happening and shouldn't be rushed anyway. Implemented a click listener which is basically a segue wrapper to open an individual view with the clicked (touched?) table cell in question. Cleaned up code a bit, fixed obvious warnings, left some that need to be looked at closer. Analytics not currently working, need to take a look at that and support decimal entries, and if I end up coming up with a decision for either of my current considerations below, tackling them will be on my tasklist as well.
9-30-14: Finally got analytics to (somewhat) work - the real time stuff seems to be working properly, however the regular metrics do not seem to be showing up, hoping it's just a lag issue but will double check analytics in morning. Got decimal entries supported, did not really test much. UI testing might be something good to get into. Barbell generation needs finished and then possibly some cutesy UI changes and I think this is good to go for a more or less bare bones version 1.0. Just make sure the UI is smooth before your initial release. You may want to end up including dashboard after prototyping on android
10-1-14: Got solid base started for barbell image generation, just need to think about the best way to implement the logic so it doesn't become procedural and horribly ugly like the android version did. This app is going to mean lean and clean unlike its brother. iPhone 4s will not be able to run the individual view stuff but it's not worth smushing features when it looks about right on both the 5 and 6. Add in pretty logic and dashboarding and its buttons are next. Think about plate logic tomorrow. Or even implement it if you have time:) 
Don't forget about kilogram support and the odd database previous entry bug you've been seeing.
10-2-14: Got pound barbell generation completely done, one or two methods need to be added for kilograms (basically define the indexed images with a switch and give the array of weights 25kg, 20kg etc..)
10-18-14: Started to add back end to next butotn, translation is the only thing really worried about but it is mildly hairy just because of how you deal with dates in iOS compared to android. Your incrementDay function is broken and I imagine there will be some other stuff once you get past that
10-19-14: Next function seems to be working for default view, it'll get some more testing tomorrow when I start to attack the corner case idea. Android was easy enough with cursor, however, this is similar because they both are based off a while loop, so I think writing a little flag will work well. Only caviat is a query error (which I guess I can assert won't happen, it's generated by some pretty simple string appends... I think you may want to come up with a better method 
10-20-14: Corner case uglier than I thought. I had to rig up an invisible button to get a "manual" segue to get the view to be able to create a segue to itself, then programatically called that segue and some other stupidness that I can probably ameloriate tomorrow. Clean up that code and either add back button support and/or get started on translating code for getPrevLift
10-21-14: putting 12s for all tms crashes this nigga. Recursive viewwilldisappear function no fucking idea how to fix it
10-21-14: Got prev button completely working with corner cases (easy enough to do just some translating and then robbing the getnextlift method for prevlifts too. Back button and custom segue need done
10-27-14: Got custom segue working properly, was just a matter of not calling the segue and still trying to use next's segue. Also got back button working simply by rephrasing my question on google. All about framing problem correctly :) Also got reset button working properly.

11-03-14: Deletion upon pressing "Get TMs" now happens, also now actually happens when you reset. Got view existing projection working. There is an odd date exception being thrown when you actually view existing projection (by analytics) -- look into this. Your adjust lifts button is now broken when you come from view existing projection. You are probably popping a view controller. When you use popping to go back, your "No projection found!" is not disappearing. You'll probably want to hide it in viewDidDisappear (allowing it to be hidden multiple times) as opposed to viewDidLoad(hiding it only the first time the view loads or any other instance where it is loaded and not simply shown by popping off the view controller stack.

11-04-14: Adjust lifts button now works when coming from existing projection. Initial TM data (only bench, squat, deadlift)  is currently supported when viewing an existing projection and then adjusting lift. Also implemented it to adjust the segmented controls for unit mode and number of cycles. Rounding will be very easy once the schema change is in.
TODO:
Dates are null on reprojection...? Pursue this and your individual view bug with bloodthirstiness, you can't let this stuff through.
look into bad access exception. used 400 450 500 550 on kilogram mode and an exception was thrown.
Schema change for rounding mode. Definitely needs to be done. After you have this you can choose to display data properly on viewing an existing projection
[refactor: remove getUnitModeFromDatabase from tableDisplay.m]

When you do your view bys, it changes almost instantly, you may possibly want a cutesy animation or something 
I think there's some rounding stuff somewhere along the line that needs to be taken care of in your individualview screen

Locale bullshit on previous dateformats (model of of the one on configtool's increment day... Primarily we want to make sure we are catering to all locales and not just the US)

May want to speed up segue transitions
SMALL CONCERN: Quartzcore only supports ios8, do you want to shut out other users for a custom segue?
Some sort of dashboard (Prototyping on android perhaps?)
